Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000 
ix. review table = 10000 
x. tip table = 10000 
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 537
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer: select count(*), count(id) from user;
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.71
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:	5	avg: 3.65
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.01
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.94
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.29
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: 
	select city, review_count from business order by review_count DESC;
	
	
	Copy and Paste the Result Below:
+------------+--------------+
| city       | review_count |
+------------+--------------+
| Las Vegas  |         3873 |
| Montréal   |         1757 |
| Gilbert    |         1549 |
| Las Vegas  |         1410 |
| Las Vegas  |         1389 |
| Las Vegas  |         1252 |
| Las Vegas  |         1116 |
| Las Vegas  |         1084 |
| Las Vegas  |          961 |
| Gilbert    |          902 |
| Las Vegas  |          864 |
| Scottsdale |          823 |
| Las Vegas  |          821 |
| Las Vegas  |          786 |
| Henderson  |          785 |
| Toronto    |          778 |
| Las Vegas  |          768 |
| Las Vegas  |          758 |
| Scottsdale |          726 |
| Cleveland  |          723 |
| Las Vegas  |          720 |
| Charlotte  |          715 |
| Phoenix    |          711 |
| Las Vegas  |          706 |
| Phoenix    |          700 |
+------------+--------------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
select stars, count(stars) as count from business where city = 'Avon' group by stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |     1 |
|   2.5 |     2 |
|   3.5 |     3 |
|   4.0 |     2 |
|   4.5 |     1 |
|   5.0 |     1 |
+-------+-------+


ii. Beachwood

SQL code used to arrive at answer:
select stars, count(stars) as count from business where city = 'Beachwood' group by stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     1 |
|   2.5 |     1 |
|   3.0 |     2 |
|   3.5 |     2 |
|   4.0 |     1 |
|   4.5 |     2 |
|   5.0 |     5 |
+-------+-------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	select review_count, fans, id from user order by fans DESC;

		
	Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+


8. Does posing more reviews correlate with more fans? No

	Please explain your findings and interpretation of the results:
	Using the following query (select review_count, fans, id from user order by fans DESC) shows that the highest number of fans does not necessarily correspond to highest number of review counts;

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: love

	
	SQL code used to arrive at answer:
	select count(*) from review where text like '%love%';
	select count(*) from review where text like '%hate%';

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	select name, fans from user order by fans DESC limit 10;
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
select name, stars from category left join business on category.business_id = business.id where category = 'Restaurants' and (city = 'Toronto' or city = 'Phoenix');
	
i. Do the two groups you chose to analyze have a different distribution of hours? yes
select hours from hours where business_id = (select business_id from category left join business on category.business_id = business.id where category = 'Restaurants' and city = 'Toronto');
select hours from hours where business_id = (select business_id from category left join business on category.business_id = business.id where category = 'Restaurants' and city = 'Phoenix');

ii. Do the two groups you chose to analyze have a different number of reviews? no
select review.id from from category left join business inner join review on category.business_id = business.id = review.business_id where category = 'Restaurants' and city = 'Toronto';

         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
The first two digits of the postal codes are the same for Phoenix. For Toronto, the postal codes all start with M.
The latitude and longitude are very close for locations in the same city.

SQL code used for analysis:
select name, address, neighborhood, city, postal_code, latitude, longitude, state from category left join business on category.business_id = business.id where category = 'Restaurants' and city = 'Toronto';
select name, address, neighborhood, city, postal_code, latitude, longitude, state from category left join business on category.business_id = business.id where category = 'Restaurants' and city = 'Phoenix';
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: The businesses that are sill open have a lot more review counts.
        
         
ii. Difference 2: The businesses that are still open have higher stars overall.
         
         
         
SQL code used for analysis:
select is_open, sum(stars), sum(review_count) from business group by is_open;
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
predicting average stars a user will have         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
For this analysis, I am going to use the user table. I need to analyze the following columns: average stars, yepling_since, review_count, fans, useful, funny, cool and see if there is any relationship between any of the columns and average_stars. For example, they may be a positive correlation between yepling_since and average_stars, etc. Once I find the relationships, I can use them to predict the average stars based on differnet features of a user.
                            
                  
iii. Output of your finished dataset:
name       | review_count | yelping_since       | useful | funny | cool | fans | average_stars |
+------------+--------------+---------------------+--------+-------+------+------+---------------+
| Joe        |            2 | 2016-05-27 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Joe        |            1 | 2013-01-09 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Bryan      |            5 | 2011-07-04 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Patti      |            2 | 2014-08-03 00:00:00 |     15 |    13 |    9 |    0 |           5.0 |
| Austin     |            2 | 2013-01-22 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Lissa      |            3 | 2017-04-02 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Mary       |            2 | 2013-02-06 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Bill       |            2 | 2016-04-29 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Mary       |            1 | 2014-10-03 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Margareta  |            2 | 2014-06-28 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Stephen    |            3 | 2014-02-06 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Kimmie     |            1 | 2014-04-17 00:00:00 |      1 |     0 |    0 |    0 |           5.0 |
| Rosa Maria |            1 | 2016-07-30 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Carl       |            1 | 2015-04-09 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Michael    |            1 | 2016-05-08 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Lenny      |            2 | 2013-01-17 00:00:00 |      1 |     0 |    0 |    0 |           5.0 |
| Regina     |            1 | 2011-04-02 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| A          |            1 | 2010-06-26 00:00:00 |      0 |     0 |    0 |    0 |           5.0 |
| Kelly      |            3 | 2013-03-07 00:00:00 |      0 |     1 |    0 |    0 |           5.0 |
         
         
iv. Provide the SQL code you used to create your final dataset:
select name, review_count, yepling_since, useful, funny, cool, fans, average_stars from user order by average_stars DESC;